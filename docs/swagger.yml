openapi: 3.1.0
info:
  title: API de Gestión de Usuarios y Autenticación
  version: 1.0.0
  description: API RESTful para la gestión de usuarios y autenticación, incluyendo registro, login, obtención de perfil y actualización.
  contact:
    name: Oscar Garin
    email: oscargarin@gmail.com
servers:
  - url: http://localhost:3000/api/v1 # Añadimos el prefijo /api/v1 aquí
    description: Servidor de desarrollo local

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'Token JWT (JSON Web Token) obtenido después de un login exitoso. Debe ser enviado en el encabezado Authorization como: Bearer <token>'

  schemas:
    UserBase:
      type: object
      properties:
        firstName:
          type: string
          description: Nombre del usuario.
          example: "Juan"
        lastName:
          type: string
          description: Apellido del usuario.
          example: "Pérez"
        email:
          type: string
          format: email
          description: Correo electrónico único del usuario.
          example: "juan.perez@example.com"
        phone:
          type: string
          description: Número de teléfono del usuario.
          example: "56912345678"
        userType:
          type: integer
          format: int32
          description: Tipo de usuario (ej. 1 para cliente).
          example: 1
        userStatus:
          type: integer
          format: int32
          description: Estado del usuario (ej. 1 para activo, 0 para bloqueado).
          example: 1
        profilePhoto:
          type: string
          description: URL o ruta a la foto de perfil del usuario.
          example: "uploads/profile-1678901234567.jpg"

    UserRegister:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          required:
            - firstName
            - lastName
            - email
            - phone
            - password
          properties:
            password:
              type: string
              format: password
              description: Contraseña del usuario (mínimo 6 caracteres).
              example: "MiContrasenaSegura123"

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/UserBase'
        - type: object
          properties:
            id:
              type: string
              description: ID único del usuario generado por la base de datos.
              example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
          required:
            - id

    UserLogin:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: Correo electrónico del usuario para iniciar sesión.
          example: "juan.perez@example.com"
        password:
          type: string
          format: password
          description: Contraseña del usuario.
          example: "MiContrasenaSegura123"

    LoginSuccess:
      type: object
      properties:
        token:
          type: string
          description: Token JWT para autenticación futura.
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Imp1YW4ucGVyZXpAZXhhbXBsZS5jb20iLCJpYXQiOjE2NzgyOTI0MDAsImV4cCI6MTY3ODI5NjAwMH0.signature"

    GenericMessage:
      type: object
      properties:
        message:
          type: string
          description: Mensaje descriptivo de la respuesta.
          example: "Operación exitosa"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Mensaje de error.
          example: "El correo electrónico no es válido."
      required:
        - message

    UsersPaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        total:
          type: integer
          description: Número total de usuarios.
          example: 100
        next:
          type: string
          description: URL del siguiente conjunto de resultados (HATEOAS).
          example: "/users?limits=10&page=2"
        previous:
          type: string
          description: URL del conjunto de resultados anterior (HATEOAS).
          example: "/users?limits=10&page=1"

    UserProfile:
      type: object
      properties:
        id:
          type: string
          description: ID único del usuario.
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        firstName:
          type: string
          description: Nombre del usuario.
          example: "Juan"
        lastName:
          type: string
          description: Apellido del usuario.
          example: "Pérez"
        email:
          type: string
          format: email
          description: Correo electrónico del usuario.
          example: "juan.perez@example.com"
        phone:
          type: string
          description: Número de teléfono del usuario.
          example: "56912345678"
        userType:
          type: integer
          description: Tipo de usuario.
          example: 1
        userStatus:
          type: integer
          description: Estado del usuario.
          example: 1
        profilePhoto:
          type: [string, 'null']
          description: URL o ruta de la foto de perfil. Puede ser nulo si no se ha subido ninguna.
          example: "uploads/profile-1678901234567.jpg"

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único del producto.
        product_name:
          type: string
          description: Nombre del producto.
        description:
          type: string
          description: Descripción del producto.
        price:
          type: number
          format: float
          description: Precio del producto.
        stock:
          type: integer
          description: Stock disponible del producto.
        img:
          type: string
          description: Ruta o URL de la imagen del producto.
        category:
          type: string
          description: Nombre de la categoría del producto.
        category_id:
          type: string
          format: uuid
          description: ID de la categoría del producto.
        season:
          type: string
          description: Nombre de la temporada del producto.
        season_id:
          type: string
          format: uuid
          description: ID de la temporada del producto.
        create_date:
          type: string
          format: date-time
          description: Fecha de creación del producto.
        update_date:
          type: string
          format: date-time
          description: Fecha de última actualización del producto.

    Category:
      type: object
      properties:
        id:
          type: integer
          description: ID único de la categoría.
        name:
          type: string
          description: Nombre de la categoría.

    Season:
      type: object
      properties:
        id:
          type: integer
          description: ID único de la temporada.
        name:
          type: string
          description: Nombre de la temporada.

  parameters:
    PaginationLimit:
      in: query
      name: limits
      schema:
        type: integer
        default: 10
      description: Número máximo de elementos a devolver por página.
    PaginationPage:
      in: query
      name: page
      schema:
        type: integer
        default: 1
      description: Número de la página de resultados.
    PaginationOrderBy:
      in: query
      name: orderBy
      schema:
        type: string
        default: 'id_ASC'
        enum:
          - id_ASC
          - id_DESC
          - first_name_ASC
          - first_name_DESC
          - last_name_ASC
          - last_name_DESC
          - email_ASC
          - email_DESC
      description: Campo y dirección para ordenar los resultados (ej. id_ASC, email_DESC).

tags:
  - name: Authentication
    description: Operaciones de autenticación de usuarios.
  - name: Users
    description: Gestión y administración de usuarios.
  - name: Products
    description: Operaciones relacionadas con productos.
  - name: Categories
    description: Operaciones relacionadas con categorías de productos.
  - name: Seasons
    description: Operaciones relacionadas con temporadas de productos.

paths:
  /login:
    post:
      summary: Iniciar sesión de usuario
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login exitoso. Devuelve un token JWT.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '401':
          description: Email o contraseña incorrecta / No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    post:
      summary: Registrar un nuevo usuario cliente
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: Nombre del usuario.
                lastName:
                  type: string
                  description: Apellido del usuario.
                email:
                  type: string
                  format: email
                  description: Correo electrónico único del usuario.
                phone:
                  type: string
                  description: Número de teléfono del usuario.
                password:
                  type: string
                  format: password
                  description: Contraseña del usuario (mínimo 6 caracteres).
                userType:
                  type: integer
                  format: int32
                  description: Tipo de usuario (por defecto 1 para cliente).
                  default: 1
                profilePhoto:
                  type: string
                  format: binary
                  description: Archivo de imagen de perfil (opcional).
            encoding:
              profilePhoto:
                contentType: image/png, image/jpeg, image/gif
      responses:
        '201':
          description: Usuario creado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario creado correctamente"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Campos obligatorios faltantes o datos inválidos (ej. email, password).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El usuario con este correo electrónico ya existe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Obtener lista de usuarios con paginación, filtros y ordenamiento
      tags: [Users]
      security:
        - bearerAuth: [] # Esta ruta requiere autenticación
      parameters:
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationPage'
        - $ref: '#/components/parameters/PaginationOrderBy'
      responses:
        '200':
          description: Lista de usuarios paginada con HATEOAS.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginatedResponse'
        '401':
          description: No autorizado. Token no proporcionado o inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado. El usuario no tiene los permisos necesarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/lock/{id}:
    put:
      summary: Cambiar el estado (bloquear/desbloquear) un usuario
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid # Asumiendo que el ID es un UUID
          required: true
          description: ID del usuario a bloquear/desbloquear.
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userStatus # Se espera solo el nuevo estado del usuario
              properties:
                userStatus:
                  type: integer
                  description: El nuevo estado del usuario (0 para bloqueado, 1 para activo).
                  example: 0
      responses:
        '200':
          description: Usuario bloqueado/desbloqueado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuario bloqueado exitosamente"
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                      user_status:
                        type: integer
                        example: 0
        '400':
          description: Solicitud inválida (ej. ID no proporcionado o estado no válido).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado. Token no proporcionado o inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado. El usuario no tiene los permisos necesarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/profile:
    get:
      summary: Obtener el perfil del usuario autenticado
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Perfil del usuario.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Token no presente o inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Perfil no encontrado (usuario no existe).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Actualizar el perfil del usuario autenticado
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: Nuevo nombre del usuario.
                  example: "Juan Actualizado"
                lastName:
                  type: string
                  description: Nuevo apellido del usuario.
                  example: "Pérez Actualizado"
                phone:
                  type: string
                  description: Nuevo número de teléfono.
                  example: "56998765432"
          multipart/form-data:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  description: Nuevo nombre del usuario.
                lastName:
                  type: string
                  description: Nuevo apellido del usuario.
                phone:
                  type: string
                  description: Nuevo número de teléfono.
                profilePhoto:
                  type: string
                  format: binary
                  description: Nueva foto de perfil (archivo).
            encoding:
              profilePhoto:
                contentType: image/png, image/jpeg, image/gif
      responses:
        '200':
          description: Perfil actualizado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Perfil actualizado"
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          description: Token no presente, inválido o no se proporcionaron datos para actualizar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Usuario no encontrado para actualizar.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users:
    get:
      summary: Obtener lista de empleados
      tags: [Users]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de empleados.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '401':
          description: No autorizado. Token no proporcionado o inválido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado. El usuario no tiene los permisos necesarios.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Crear un nuevo empleado
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: Empleado creado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Empleado creado correctamente"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Campos obligatorios faltantes o datos inválidos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: El empleado con este correo electrónico ya existe.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/employee/{id}:
    put:
      summary: Actualizar un empleado por ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID del empleado a actualizar.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                userType:
                  type: integer
                userStatus:
                  type: integer
      responses:
        '200':
          description: Empleado actualizado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Empleado actualizado"
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          description: Solicitud inválida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Empleado no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products:
    get:
      summary: Obtener lista de productos con paginación y filtros
      tags: [Products]
      parameters:
        - $ref: '#/components/parameters/PaginationLimit'
        - $ref: '#/components/parameters/PaginationPage'
        - in: query
          name: orderBy
          schema:
            type: string
            default: 'id_ASC'
          description: Campo y dirección para ordenar los resultados (ej. id_ASC, name_DESC).
        - in: query
          name: season
          schema:
            type: string
          description: Filtrar por ID de temporada.
        - in: query
          name: category
          schema:
            type: string
          description: Filtrar por ID de categoría.
      responses:
        '200':
          description: Lista de productos paginada.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Crear un nuevo producto
      tags: [Products]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - description
                - price
                - stock
                - productCategory
                - seasonCategory
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                stock:
                  type: integer
                productCategory:
                  type: string
                  description: ID de la categoría de producto.
                seasonCategory:
                  type: string
                  description: ID de la categoría de temporada.
                productPhoto:
                  type: string
                  format: binary
            encoding:
              productPhoto:
                contentType: image/png, image/jpeg, image/gif
      responses:
        '201':
          description: Producto creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Solicitud inválida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/{id}:
    get:
      summary: Obtener un producto por ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID del producto a obtener.
      responses:
        '200':
          description: Datos del producto.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Producto no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Actualizar un producto por ID
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID del producto a actualizar.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                  format: float
                stock:
                  type: integer
                productCategory:
                  type: string
                  description: ID de la categoría de producto.
                seasonCategory:
                  type: string
                  description: ID de la categoría de temporada.
                productPhoto:
                  type: string
                  format: binary
            encoding:
              productPhoto:
                contentType: image/png, image/jpeg, image/gif
      responses:
        '200':
          description: Producto actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Solicitud inválida.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Producto no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/frontPage:
    get:
      summary: Obtener lista de productos para la página principal
      tags: [Products]
      responses:
        '200':
          description: Lista de productos para la página principal.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/inventory:
    get:
      summary: Obtener inventario de productos
      tags: [Products]
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Inventario de productos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product' # O un esquema más específico si el inventario tiene menos campos.
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /products/lock/{id}:
    get:
      summary: Obtener el estado de bloqueo de un producto
      tags: [Products]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: ID del producto cuyo estado de bloqueo se quiere obtener.
      responses:
        '200':
          description: Estado de bloqueo del producto.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                  status:
                    type: boolean
                    description: True si está bloqueado, False si está activo.
                    example: true
        '401':
          description: No autorizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Acceso denegado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Producto no encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /categories:
    get:
      summary: Obtener todas las categorías de productos
      tags: [Categories]
      responses:
        '200':
          description: Lista de categorías.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /seasons:
    get:
      summary: Obtener todas las temporadas de productos
      tags: [Seasons]
      responses:
        '200':
          description: Lista de temporadas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Season'
        '500':
          description: Error interno del servidor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'