openapi: 3.0.0
info:
  title: API de E-commerce
  description: API para gestionar productos, usuarios, categorías y temporadas de un e-commerce.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1 # Esta es la URL base
tags:
  - name: Productos
    description: Operaciones relacionadas con los productos
  - name: Usuarios
    description: Operaciones relacionadas con los usuarios y autenticación
  - name: Categorías
    description: Operaciones relacionadas con las categorías de productos
  - name: Temporadas
    description: Operaciones relacionadas con las temporadas de productos
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único del producto
          example: "a1b2c3d4-e5f6-7890-1234-567890abcdef"
        productname:
          type: string
          description: Nombre del producto
          example: "Camiseta de Verano"
        description:
          type: string
          description: Descripción detallada del producto
          example: "Camiseta de algodón 100% ideal para el verano, disponible en varios colores."
        price:
          type: number
          format: float
          description: Precio del producto
          example: 25.99
        stock:
          type: integer
          description: Cantidad de stock disponible
          example: 150
        img:
          type: string
          description: URL o nombre de archivo de la imagen del producto
          example: "camiseta_verano.jpg"
        category:
          type: string
          description: Nombre de la categoría a la que pertenece el producto
          example: "Ropa"
        category_id:
          type: string
          format: uuid
          description: ID de la categoría a la que pertenece el producto
          example: "c0d1e2f3-g4h5-9012-3456-7890abcdef12"
        season:
          type: string
          description: Nombre de la temporada a la que pertenece el producto
          example: "Verano"
        season_id:
          type: string
          format: uuid
          description: ID de la temporada a la que pertenece el producto
          example: "s0a1b2c3-d4e5-6789-0123-456789abcdef"
        create_date:
          type: string
          format: date-time
          description: Fecha de creación del producto
          example: "2023-10-26T10:00:00Z"
        update_date:
          type: string
          format: date-time
          description: Fecha de última actualización del producto
          example: "2023-10-26T10:30:00Z"
    NewProduct:
      type: object
      required:
        - name
        - description
        - price
        - stock
        - productCategory
        - seasonCategory
      properties:
        name:
          type: string
          description: Nombre del producto
          example: "Pantalón Denim"
        description:
          type: string
          description: Descripción del producto
          example: "Pantalón de mezclilla clásico"
        price:
          type: number
          format: float
          example: 49.99
        stock:
          type: integer
          example: 100
        productCategory:
          type: string
          description: ID de la categoría del producto
          example: "c0d1e2f3-g4h5-9012-3456-7890abcdef12"
        seasonCategory:
          type: string
          description: ID de la temporada del producto
          example: "s0a1b2c3-d4e5-6789-0123-456789abcdef"
        productPhoto:
          type: string
          format: binary
          description: Archivo de la foto del producto (se sube como multipart/form-data)
    UpdateProduct:
      type: object
      properties:
        name:
          type: string
          description: Nuevo nombre del producto
          example: "Pantalón Denim Slim Fit"
        description:
          type: string
          description: Nueva descripción del producto
          example: "Pantalón de mezclilla slim fit de alta calidad."
        price:
          type: number
          format: float
          example: 59.99
        stock:
          type: integer
          example: 80
        productCategory:
          type: string
          description: Nuevo ID de la categoría del producto
          example: "c0d1e2f3-g4h5-9012-3456-7890abcdef12"
        seasonCategory:
          type: string
          description: Nuevo ID de la temporada del producto
          example: "s0a1b2c3-d4e5-6789-0123-456789abcdef"
        productPhoto:
          type: string
          format: binary
          description: Nuevo archivo de la foto del producto (se sube como multipart/form-data)
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único del usuario
          example: "u1v2w3x4-y5z6-7890-1234-567890abcdef"
        first_name:
          type: string
          example: "Juan"
        last_name:
          type: string
          example: "Perez"
        email:
          type: string
          format: email
          example: "juan.perez@example.com"
        phone:
          type: string
          example: "555-1234"
        user_type:
          type: string
          enum: [admin, client]
          example: "client"
        user_status:
          type: integer
          description: 0 para bloqueado, 1 para activo
          example: 1
        profile_photo:
          type: string
          description: URL o nombre de archivo de la foto de perfil
          example: "juan_perez_profile.jpg"
    NewUser:
      type: object
      required:
        - firstName
        - lastName
        - email
        - phone
        - password
        - userType
      properties:
        firstName:
          type: string
          example: "Maria"
        lastName:
          type: string
          example: "Gomez"
        email:
          type: string
          format: email
          example: "maria.gomez@example.com"
        phone:
          type: string
          example: "555-5678"
        password:
          type: string
          format: password
          example: "password123"
        userType:
          type: string
          enum: [admin, client]
          example: "client"
        profilePhoto:
          type: string
          format: binary
          description: Archivo de la foto de perfil (se sube como multipart/form-data)
    UserProfileUpdate:
      type: object
      properties:
        firstName:
          type: string
          example: "Maria Paz"
        lastName:
          type: string
          example: "Gomez Soto"
        phone:
          type: string
          example: "555-9999"
        profilePhoto:
          type: string
          format: binary
          description: Nuevo archivo de la foto de perfil (se sube como multipart/form-data)
    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "test@example.com"
        password:
          type: string
          format: password
          example: "password123"
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT de autenticación
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único de la categoría
          example: "cat123-abc-456"
        name:
          type: string
          description: Nombre de la categoría
          example: "Electrónica"
    Season:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: ID único de la temporada
          example: "sea789-def-012"
        name:
          type: string
          description: Nombre de la temporada
          example: "Verano"
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Algo salió mal"
        error:
          type: object
          properties:
            name:
              type: string
              example: "Error"
            message:
              type: string
              example: "Detalle del error"
paths:
  /products: # Corregido: eliminado /api/v1
    get:
      tags:
        - Productos
      summary: Obtiene una lista paginada de productos
      parameters:
        - in: query
          name: limits
          schema:
            type: integer
            default: 10
          description: Número de productos por página
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página
        - in: query
          name: orderBy
          schema:
            type: string
            default: id_ASC
            enum: [id_ASC, id_DESC, name_ASC, name_DESC, price_ASC, price_DESC]
          description: Orden de los productos (columna_DIRECCION)
        - in: query
          name: season
          schema:
            type: string
          description: ID de la temporada para filtrar productos
        - in: query
          name: category
          schema:
            type: string
          description: ID de la categoría para filtrar productos
      responses:
        200:
          description: Lista de productos exitosamente obtenida
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalProducts:
                    type: integer
                    example: 50
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Productos
      summary: Crea un nuevo producto
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewProduct'
      responses:
        201:
          description: Producto creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Datos de entrada inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        401:
          description: No autorizado (token inválido o no proporcionado)
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products/{id}: # Corregido: eliminado /api/v1
    get:
      tags:
        - Productos
      summary: Obtiene un producto por su ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID del producto a obtener
      responses:
        200:
          description: Producto encontrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        404:
          description: Producto no encontrado
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Productos
      summary: Actualiza un producto existente
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: ID del producto a actualizar
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProduct'
      responses:
        200:
          description: Producto actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        400:
          description: Datos de entrada inválidos
        401:
          description: No autorizado (token inválido o no proporcionado)
        404:
          description: Producto no encontrado
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /seasons: # Corregido: eliminado /api/v1
    get:
      tags:
        - Temporadas
      summary: Obtiene una lista de todas las temporadas disponibles
      responses:
        200:
          description: Lista de temporadas exitosamente obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Season'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /categories: # Corregido: eliminado /api/v1
    get:
      tags:
        - Categorías
      summary: Obtiene una lista de todas las categorías disponibles
      responses:
        200:
          description: Lista de categorías exitosamente obtenida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users: # Corregido: eliminado /api/v1
    get:
      tags:
        - Usuarios
      summary: Obtiene una lista paginada de usuarios
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: limits
          schema:
            type: integer
            default: 10
          description: Número de usuarios por página
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Número de página
        - in: query
          name: orderBy
          schema:
            type: string
            default: id_ASC
            enum: [id_ASC, id_DESC, first_name_ASC, first_name_DESC, email_ASC, email_DESC]
          description: Orden de los usuarios (columna_DIRECCION)
      responses:
        200:
          description: Lista de usuarios exitosamente obtenida
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalUsers:
                    type: integer
                    example: 20
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        401:
          description: No autorizado (token inválido o no proporcionado)
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Usuarios
      summary: Registra un nuevo usuario
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        201:
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos de entrada inválidos o usuario ya existe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /lockuser: # Corregido: eliminado /api/v1
    put:
      tags:
        - Usuarios
      summary: Bloquea o desbloquea a un usuario por su email
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user_to_lock@example.com"
      responses:
        200:
          description: Estado del usuario actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: "u1v2w3x4-y5z6-7890-1234-567890abcdef"
                  user_status:
                    type: integer
                    example: 0
        400:
          description: Email no proporcionado o inválido
        401:
          description: No autorizado (token inválido o no proporcionado)
        404:
          description: Usuario no encontrado
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/profile: # Corregido: eliminado /api/v1
    get:
      tags:
        - Usuarios
      summary: Obtiene el perfil del usuario autenticado
      security:
        - bearerAuth: []
      responses:
        200:
          description: Perfil del usuario obtenido exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: No autorizado (token inválido o no proporcionado)
        404:
          description: Usuario no encontrado
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Usuarios
      summary: Actualiza el perfil del usuario autenticado
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        200:
          description: Perfil del usuario actualizado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Datos de entrada inválidos
        401:
          description: No autorizado (token inválido o no proporcionado)
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login: # Corregido: eliminado /api/v1
    post:
      tags:
        - Usuarios
      summary: Autentica un usuario y devuelve un token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        200:
          description: Login exitoso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        400:
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'